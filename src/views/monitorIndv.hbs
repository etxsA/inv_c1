<div class="container-fluid">
  <div class="row">
    <div class="mx-auto col-lg-10 px-md-4">
      <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
        <h1 class="h2">Monitor Individual</h1>
        <div class="btn-toolbar mb-2 mb-md-0">


          <div class="dropdown2">
            <button class="btn btn-outline-success dropdown-toggle" type="button" id="dropdownMenu2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
              Exportar
            </button>
            <div class="dropdown-menu" aria-labelledby="dropdownMenu2">
              <button class="dropdown-item" type="button" onclick="exportChart(1);">Temperatura</button>
              <button class="dropdown-item" type="button" onclick="exportChart(2);">Humedad</button>
              <button class="dropdown-item" type="button" onclick="exportChart(3);">LDR</button>
              <button class="dropdown-item" type="button" onclick="exportChart(4);">Luminosidad</button>
              <button class="dropdown-item" type="button" onclick="exportChart(5);">Humedad del Suelo</button>
              <button class="dropdown-item" type="button" onclick="exportChart(6);">pH del Agua</button>
            </div>
          </div>

          <div class="dropdown">
            <button type="button" class="btn btn-outline-success dropdown-toggle" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
              <i class="fa-solid fa-calendar"></i>
               {{title2}}
            </button>

            <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
            <a class="dropdown-item {{btnStatus.btn1}}" href="/app/monitor/indv/w">Ultimos 7 Dias</a>
            <a class="dropdown-item {{btnStatus.btn2}}" href="/app/monitor/indv/m">Ultimos 12 Meses</a>
            <a class="dropdown-item {{btnStatus.btn3}}" href="/app/monitor/indv/h">Ultimas 24 Horas</a>
            <a class="dropdown-item {{btnStatus.btn4}}" href="/app/monitor/indv/mn">Ultimas 24 Horas Por Minuto</a>
            </div> 

          </div>
          
          <button type="button" class="btn btn-sm btn-outline-success" onclick="window.location.reload();">
            <i class="fa-solid fa-arrows-rotate"></i>
            Actualizar
          </button>
        </div>
      </div>
    </div>

    <div class="mx-auto col-lg-10 px-md-4 ">
      <div class="row">
        <div class="col-lg-6 mx-auto">
          <canvas class="mx-2 w-100" id="myChart" width="900" height="380"></canvas>
        </div>
        <div class="col-lg-6 mx-auto">
          <canvas class="mx-2 w-100" id="myChart2" width="900" height="380"></canvas>
        </div>
      </div>

      <div class="row">
        <div class="col-lg-6 mx-auto">
          <canvas class="mx-2 w-100" id="myChart3" width="900" height="380"></canvas>
        </div>
        <div class="col-lg-6 mx-auto">
          <canvas class="mx-2 w-100" id="myChart4" width="900" height="380"></canvas>
        </div>
      </div>

      <div class="row">
        <div class="col-lg-6 mx-auto">
          <canvas class="mx-2 w-100" id="myChart5" width="900" height="380"></canvas>
        </div>
        <div class="col-lg-6 mx-auto">
          <canvas class="mx-2 w-100" id="myChart6" width="900" height="380"></canvas>
        </div>
      </div>
    </div>

      <div class="mx-auto col-lg-10 px-md-4">
        <h2>Datos: </h2>
        
        <div class="table-responsive">
          <table class="table table-striped table-sm">
            <thead>
              <tr>
                <th>{{title}}</th>
                <th>ºC<i class="fa-solid fa-temperature-three-quarters"></i></th>
                <th>Hum<i class="fa-solid fa-droplet"></i></th>
                <th>LDR</th>
                <th>Lum<i class="fa-solid fa-sun-plant-wilt"></i></th>
                <th>Hum Suelo</th>
                <th>pH<i class="fa-solid fa-plant-wilt"></i></th>
                <th>Inv<i class="fa-solid fa-house-signal"></i></th>
                <th>Tiempo<i class="fa-solid fa-clock-rotate-left"></i></th>
              </tr>
            </thead>
            <tbody>
              {{#each rows}}
                  <tr>
                  <td>{{Date}}</td>
                  <td>{{temp}}</td>
                  <td>{{hum}}</td>
                  <td>{{ldr}}</td>
                  <td>{{lum}}</td>
                  <td>{{shum}}</td>
                  <td>{{pH}}</td>
                  <td>{{inv}}</td>
                  <td>{{timeago measured_at}}</td>
                  </tr>
              {{else}}
                  <p>No infor to show</p>
              {{/each}}
            </tbody>
          </table>
        </div>
      </div>
  </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  let labels = [];
  {{#each labels}}
    labels.push('{{this}}');
  {{/each}}
  const title = '{{title}}';

  const data1 = {
    labels: labels,
    datasets: [
      {
        label: 'Temp ºC',
        data: [{{temp}}],
        borderColor: 'rgb(255, 99, 132)',
        backgroundColor: 'rgba(255, 99, 132, 0.5)',
        yAxisID: 'y',
      }
    ]
  };

  const data2 = {
    labels: labels,
    datasets: [
      {
        label: 'Hum',
        data: [{{hum}}],
        borderColor: 'rgb(0, 191, 255)',
        backgroundColor: 'rgba(0, 191, 255, 0.5)',
        yAxisID: 'y',
      }
    ]
  };

  const data3 = {
    labels: labels,
    datasets: [
      {
        label: 'LDR',
        data: [{{ldr}}],
        borderColor: 'rgb(75,0,130)',
        backgroundColor: 'rgba(75, 0, 130, 0.5)',
        yAxisID: 'y',
      }
    ]
  };

  const data4 = {
    labels: labels,
    datasets: [
      {
        label: 'Lum',
        data: [{{lum}}],
        borderColor: 'rgb(255, 234, 0)',
        backgroundColor: 'rgba(255, 234, 0, 0.5)',
        yAxisID: 'y',
      }
    ]
  };

  const data5 = {
    labels: labels,
    datasets: [
      {
        label: 'Hum Suelo',
        data: [{{shum}}],
        borderColor: 'rgb(238,130,238)',
        backgroundColor: 'rgba(238, 130, 238, 0.5)',
        yAxisID: 'y',
      }
    ]
  };

  const data6 = {
    labels: labels,
    datasets: [
      {
        label: 'pH',
        data: [{{pH}}],
        borderColor: 'rgb(173, 255, 47)',
        backgroundColor: 'rgba(173, 255, 47, 0.5)',
        yAxisID: 'y',
      }
    ]
  };

  
  
  let chart = createChart(data1, 18, 30, "Temperatura", document.getElementById('myChart'));
  let chart2 = createChart(data2, 60, 80, "Humedad", document.getElementById("myChart2"));
  let chart3 = createChart(data3, 40, 100, "LDR", document.getElementById("myChart3"));
  let chart4 = createChart(data4, 10, 10000, "Luminosidad", document.getElementById("myChart4"));
  let chart5 = createChart(data5, 60, 80, "Humedad del Suelo", document.getElementById("myChart5"));
  let chart6 = createChart(data6, 5, 7, "pH del agua", document.getElementById("myChart6"));

  
  function exportChart(chartNum) {
    const selectedChart = {
      1: chart,
      2: chart2,
      3: chart3,
      4: chart4,
      5: chart5,
      6: chart6
    }
    const dataURI = selectedChart[chartNum].toBase64Image();
    
    const a = document.createElement('a');
    a.href = dataURI;
    a.download = 'grafico.png';

    // Trigger the download    
    a.click();
  }



  function createChart(data, bottomLineValue, topLineValue, title, ctx) {
      // Plugin Block 
    const doubleArbitraryLine = {
      id: 'doubleArbitraryLine',
      beforeDraw(chart, args, options) {
        const { ctx, chartArea: { top, right, bottom, left, width, height}, scales: { x, y} } = chart;
        ctx.save();
        
        // Top && Bottom Line
        ctx.strokeStyle = 'red';
        ctx.strokeRect(left, y.getPixelForValue(options.topLineValue), width, 0);
        ctx.strokeRect(left, y.getPixelForValue(options.bottomLineValue), width, 0);
        ctx.restore();

        // Fill BG
        ctx.fillStyle = "rgba(255, 64, 61, 0.2)";
        ctx.fillRect(left, top, width, y.getPixelForValue(topLineValue) - top);
        ctx.fillRect(left, y.getPixelForValue(bottomLineValue), width, bottom-y.getPixelForValue(bottomLineValue));
        ctx.restore();

        // Write TExt

        ctx.font = " 14px Montserrat";
        ctx.fillStyle = 'red';
        ctx.fillText('Muy Bajo', width / 2 + left, y.getPixelForValue(bottomLineValue) + bottomLineValue + 4);
        ctx.fillText('Muy Alto', width / 2 + left, y.getPixelForValue(topLineValue) - topLineValue - 4);
        ctx.textAlign = 'center';
        ctx.restore();


      } 
    }

    const config = {
      type: 'line',
      data: data,
      options: {
        responsive: true,
        interaction: {
          mode: 'index',
          intersect: false,
        },
        stacked: false,
        plugins: {
          doubleArbitraryLine: {
            bottomLineValue: bottomLineValue,
            topLineValue: topLineValue
          },
          title: {
            display: true,
            text: title
          }
        },
        scales: {
          y: {
            type: 'linear',
            display: true,
            position: 'left',

            grid: {
              drawOnChartArea: true
            }
          }
        }
      },
      plugins: [doubleArbitraryLine]
    };

    return new Chart(ctx, config);
  }
  
</script>
